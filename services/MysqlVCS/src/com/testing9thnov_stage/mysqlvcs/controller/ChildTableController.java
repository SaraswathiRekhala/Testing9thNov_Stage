/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.mysqlvcs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.mysqlvcs.ChildTable;
import com.testing9thnov_stage.mysqlvcs.service.ChildTableService;


/**
 * Controller object for domain model class ChildTable.
 * @see ChildTable
 */
@RestController("MysqlVCS.ChildTableController")
@Api(value = "ChildTableController", description = "Exposes APIs to work with ChildTable resource.")
@RequestMapping("/MysqlVCS/ChildTable")
public class ChildTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChildTableController.class);

    @Autowired
	@Qualifier("MysqlVCS.ChildTableService")
	private ChildTableService childTableService;

	@ApiOperation(value = "Creates a new ChildTable instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public ChildTable createChildTable(@RequestBody ChildTable childTable) {
		LOGGER.debug("Create ChildTable with information: {}" , childTable);

		childTable = childTableService.create(childTable);
		LOGGER.debug("Created ChildTable with information: {}" , childTable);

	    return childTable;
	}

    @ApiOperation(value = "Returns the ChildTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ChildTable getChildTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ChildTable with id: {}" , id);

        ChildTable foundChildTable = childTableService.getById(id);
        LOGGER.debug("ChildTable details with id: {}" , foundChildTable);

        return foundChildTable;
    }

    @ApiOperation(value = "Updates the ChildTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ChildTable editChildTable(@PathVariable("id") Integer id, @RequestBody ChildTable childTable) throws EntityNotFoundException {
        LOGGER.debug("Editing ChildTable with id: {}" , childTable.getId());

        childTable.setId(id);
        childTable = childTableService.update(childTable);
        LOGGER.debug("ChildTable details with id: {}" , childTable);

        return childTable;
    }

    @ApiOperation(value = "Deletes the ChildTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteChildTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ChildTable with id: {}" , id);

        ChildTable deletedChildTable = childTableService.delete(id);

        return deletedChildTable != null;
    }

    /**
     * @deprecated Use {@link #findChildTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ChildTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChildTable> searchChildTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ChildTables list");
        return childTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ChildTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChildTable> findChildTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ChildTables list");
        return childTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ChildTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ChildTable> filterChildTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ChildTables list");
        return childTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportChildTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return childTableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ChildTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countChildTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ChildTables");
		return childTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getChildTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return childTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChildTableService instance
	 */
	protected void setChildTableService(ChildTableService service) {
		this.childTableService = service;
	}

}

