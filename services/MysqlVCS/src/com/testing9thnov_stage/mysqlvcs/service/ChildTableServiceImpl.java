/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.mysqlvcs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.mysqlvcs.ChildTable;


/**
 * ServiceImpl object for domain model class ChildTable.
 *
 * @see ChildTable
 */
@Service("MysqlVCS.ChildTableService")
@Validated
public class ChildTableServiceImpl implements ChildTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChildTableServiceImpl.class);


    @Autowired
    @Qualifier("MysqlVCS.ChildTableDao")
    private WMGenericDao<ChildTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ChildTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "MysqlVCSTransactionManager")
    @Override
	public ChildTable create(ChildTable childTable) {
        LOGGER.debug("Creating a new ChildTable with information: {}", childTable);
        ChildTable childTableCreated = this.wmGenericDao.create(childTable);
        return childTableCreated;
    }

	@Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
	@Override
	public ChildTable getById(Integer childtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding ChildTable by id: {}", childtableId);
        ChildTable childTable = this.wmGenericDao.findById(childtableId);
        if (childTable == null){
            LOGGER.debug("No ChildTable found with id: {}", childtableId);
            throw new EntityNotFoundException(String.valueOf(childtableId));
        }
        return childTable;
    }

    @Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
	@Override
	public ChildTable findById(Integer childtableId) {
        LOGGER.debug("Finding ChildTable by id: {}", childtableId);
        return this.wmGenericDao.findById(childtableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "MysqlVCSTransactionManager")
	@Override
	public ChildTable update(ChildTable childTable) throws EntityNotFoundException {
        LOGGER.debug("Updating ChildTable with information: {}", childTable);
        this.wmGenericDao.update(childTable);

        Integer childtableId = childTable.getId();

        return this.wmGenericDao.findById(childtableId);
    }

    @Transactional(value = "MysqlVCSTransactionManager")
	@Override
	public ChildTable delete(Integer childtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ChildTable with id: {}", childtableId);
        ChildTable deleted = this.wmGenericDao.findById(childtableId);
        if (deleted == null) {
            LOGGER.debug("No ChildTable found with id: {}", childtableId);
            throw new EntityNotFoundException(String.valueOf(childtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
	@Override
	public Page<ChildTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ChildTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
    @Override
    public Page<ChildTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ChildTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service MysqlVCS for table ChildTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "MysqlVCSTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

