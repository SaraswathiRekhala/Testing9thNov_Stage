/*Generated by WaveMaker Studio*/
package com.testing9thnov_stage.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.db123__.ShortUsertable;


/**
 * ServiceImpl object for domain model class ShortUsertable.
 *
 * @see ShortUsertable
 */
@Service("db123__.ShortUsertableService")
@Validated
public class ShortUsertableServiceImpl implements ShortUsertableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShortUsertableServiceImpl.class);


    @Autowired
    @Qualifier("db123__.ShortUsertableDao")
    private WMGenericDao<ShortUsertable, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ShortUsertable, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
	public ShortUsertable create(ShortUsertable shortUsertable) {
        LOGGER.debug("Creating a new ShortUsertable with information: {}", shortUsertable);
        ShortUsertable shortUsertableCreated = this.wmGenericDao.create(shortUsertable);
        return shortUsertableCreated;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ShortUsertable getById(Short shortusertableId) throws EntityNotFoundException {
        LOGGER.debug("Finding ShortUsertable by id: {}", shortusertableId);
        ShortUsertable shortUsertable = this.wmGenericDao.findById(shortusertableId);
        if (shortUsertable == null){
            LOGGER.debug("No ShortUsertable found with id: {}", shortusertableId);
            throw new EntityNotFoundException(String.valueOf(shortusertableId));
        }
        return shortUsertable;
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ShortUsertable findById(Short shortusertableId) {
        LOGGER.debug("Finding ShortUsertable by id: {}", shortusertableId);
        return this.wmGenericDao.findById(shortusertableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
	@Override
	public ShortUsertable update(ShortUsertable shortUsertable) throws EntityNotFoundException {
        LOGGER.debug("Updating ShortUsertable with information: {}", shortUsertable);
        this.wmGenericDao.update(shortUsertable);

        Short shortusertableId = shortUsertable.getUserId();

        return this.wmGenericDao.findById(shortusertableId);
    }

    @Transactional(value = "db123__TransactionManager")
	@Override
	public ShortUsertable delete(Short shortusertableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ShortUsertable with id: {}", shortusertableId);
        ShortUsertable deleted = this.wmGenericDao.findById(shortusertableId);
        if (deleted == null) {
            LOGGER.debug("No ShortUsertable found with id: {}", shortusertableId);
            throw new EntityNotFoundException(String.valueOf(shortusertableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public Page<ShortUsertable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ShortUsertables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<ShortUsertable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ShortUsertables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table ShortUsertable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

