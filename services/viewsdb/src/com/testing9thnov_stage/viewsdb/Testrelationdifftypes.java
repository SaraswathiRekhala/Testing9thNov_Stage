/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Testrelationdifftypes generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`testrelationdifftypes`")
public class Testrelationdifftypes implements Serializable {

    private Short numericcol;
    private Short smallintcol;
    private Short decimalcol;
    private Testrelationdifftypes testrelationdifftypesBySmallintcol;
    private List<Testrelationdifftypes> testrelationdifftypesesForSmallintcol;

    @Id
    @Column(name = "`numericcol`", nullable = false, scale = 0, precision = 5)
    public Short getNumericcol() {
        return this.numericcol;
    }

    public void setNumericcol(Short numericcol) {
        this.numericcol = numericcol;
    }

    @Column(name = "`smallintcol`", nullable = true, scale = 0, precision = 5)
    public Short getSmallintcol() {
        return this.smallintcol;
    }

    public void setSmallintcol(Short smallintcol) {
        this.smallintcol = smallintcol;
    }

    @Column(name = "`decimalcol`", nullable = true, scale = 0, precision = 5)
    public Short getDecimalcol() {
        return this.decimalcol;
    }

    public void setDecimalcol(Short decimalcol) {
        this.decimalcol = decimalcol;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"testrelationdifftypesBySmallintcol", "testrelationdifftypesesForSmallintcol"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`smallintcol`", referencedColumnName = "`numericcol`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_testrelationdifftypesW1jEx`"))
    public Testrelationdifftypes getTestrelationdifftypesBySmallintcol() {
        return this.testrelationdifftypesBySmallintcol;
    }

    public void setTestrelationdifftypesBySmallintcol(Testrelationdifftypes testrelationdifftypesBySmallintcol) {
        if(testrelationdifftypesBySmallintcol != null) {
            this.smallintcol = testrelationdifftypesBySmallintcol.getNumericcol();
        }

        this.testrelationdifftypesBySmallintcol = testrelationdifftypesBySmallintcol;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"testrelationdifftypesBySmallintcol", "testrelationdifftypesesForSmallintcol"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "testrelationdifftypesBySmallintcol")
    public List<Testrelationdifftypes> getTestrelationdifftypesesForSmallintcol() {
        return this.testrelationdifftypesesForSmallintcol;
    }

    public void setTestrelationdifftypesesForSmallintcol(List<Testrelationdifftypes> testrelationdifftypesesForSmallintcol) {
        this.testrelationdifftypesesForSmallintcol = testrelationdifftypesesForSmallintcol;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Testrelationdifftypes)) return false;
        final Testrelationdifftypes testrelationdifftypes = (Testrelationdifftypes) o;
        return Objects.equals(getNumericcol(), testrelationdifftypes.getNumericcol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getNumericcol());
    }
}

