/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.AutoIncrementTable;
import com.testing9thnov_stage.viewsdb.AutoIncrementTableId;
import com.testing9thnov_stage.viewsdb.service.AutoIncrementTableService;


/**
 * Controller object for domain model class AutoIncrementTable.
 * @see AutoIncrementTable
 */
@RestController("viewsdb.AutoIncrementTableController")
@Api(value = "AutoIncrementTableController", description = "Exposes APIs to work with AutoIncrementTable resource.")
@RequestMapping("/viewsdb/AutoIncrementTable")
public class AutoIncrementTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoIncrementTableController.class);

    @Autowired
	@Qualifier("viewsdb.AutoIncrementTableService")
	private AutoIncrementTableService autoIncrementTableService;

	@ApiOperation(value = "Creates a new AutoIncrementTable instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public AutoIncrementTable createAutoIncrementTable(@RequestBody AutoIncrementTable autoIncrementTable) {
		LOGGER.debug("Create AutoIncrementTable with information: {}" , autoIncrementTable);

		autoIncrementTable = autoIncrementTableService.create(autoIncrementTable);
		LOGGER.debug("Created AutoIncrementTable with information: {}" , autoIncrementTable);

	    return autoIncrementTable;
	}

@ApiOperation(value = "Returns the AutoIncrementTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoIncrementTable getAutoIncrementTable(@RequestParam("id") Integer id,@RequestParam("name") String name) throws EntityNotFoundException {

        AutoIncrementTableId autoincrementtableId = new AutoIncrementTableId();
        autoincrementtableId.setId(id);
        autoincrementtableId.setName(name);

        LOGGER.debug("Getting AutoIncrementTable with id: {}" , autoincrementtableId);
        AutoIncrementTable autoIncrementTable = autoIncrementTableService.getById(autoincrementtableId);
        LOGGER.debug("AutoIncrementTable details with id: {}" , autoIncrementTable);

        return autoIncrementTable;
    }



    @ApiOperation(value = "Updates the AutoIncrementTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoIncrementTable editAutoIncrementTable(@RequestParam("id") Integer id,@RequestParam("name") String name, @RequestBody AutoIncrementTable autoIncrementTable) throws EntityNotFoundException {

        autoIncrementTable.setId(id);
        autoIncrementTable.setName(name);

        LOGGER.debug("AutoIncrementTable details with id is updated with: {}" , autoIncrementTable);

        return autoIncrementTableService.update(autoIncrementTable);
    }


    @ApiOperation(value = "Deletes the AutoIncrementTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAutoIncrementTable(@RequestParam("id") Integer id,@RequestParam("name") String name) throws EntityNotFoundException {

        AutoIncrementTableId autoincrementtableId = new AutoIncrementTableId();
        autoincrementtableId.setId(id);
        autoincrementtableId.setName(name);

        LOGGER.debug("Deleting AutoIncrementTable with id: {}" , autoincrementtableId);
        AutoIncrementTable autoIncrementTable = autoIncrementTableService.delete(autoincrementtableId);

        return autoIncrementTable != null;
    }


    /**
     * @deprecated Use {@link #findAutoIncrementTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AutoIncrementTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AutoIncrementTable> searchAutoIncrementTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AutoIncrementTables list");
        return autoIncrementTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AutoIncrementTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AutoIncrementTable> findAutoIncrementTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AutoIncrementTables list");
        return autoIncrementTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AutoIncrementTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AutoIncrementTable> filterAutoIncrementTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AutoIncrementTables list");
        return autoIncrementTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAutoIncrementTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return autoIncrementTableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AutoIncrementTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAutoIncrementTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AutoIncrementTables");
		return autoIncrementTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAutoIncrementTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return autoIncrementTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AutoIncrementTableService instance
	 */
	protected void setAutoIncrementTableService(AutoIncrementTableService service) {
		this.autoIncrementTableService = service;
	}

}

