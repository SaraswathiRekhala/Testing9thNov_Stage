/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Table113;
import com.testing9thnov_stage.viewsdb.service.Table113Service;


/**
 * Controller object for domain model class Table113.
 * @see Table113
 */
@RestController("viewsdb.Table113Controller")
@Api(value = "Table113Controller", description = "Exposes APIs to work with Table113 resource.")
@RequestMapping("/viewsdb/Table113")
public class Table113Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table113Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table113Service")
	private Table113Service table113Service;

	@ApiOperation(value = "Creates a new Table113 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table113 createTable113(@RequestBody Table113 table113) {
		LOGGER.debug("Create Table113 with information: {}" , table113);

		table113 = table113Service.create(table113);
		LOGGER.debug("Created Table113 with information: {}" , table113);

	    return table113;
	}

    @ApiOperation(value = "Returns the Table113 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table113 getTable113(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table113 with id: {}" , id);

        Table113 foundTable113 = table113Service.getById(id);
        LOGGER.debug("Table113 details with id: {}" , foundTable113);

        return foundTable113;
    }

    @ApiOperation(value = "Updates the Table113 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table113 editTable113(@PathVariable("id") Integer id, @RequestBody Table113 table113) throws EntityNotFoundException {
        LOGGER.debug("Editing Table113 with id: {}" , table113.getId());

        table113.setId(id);
        table113 = table113Service.update(table113);
        LOGGER.debug("Table113 details with id: {}" , table113);

        return table113;
    }

    @ApiOperation(value = "Deletes the Table113 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable113(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table113 with id: {}" , id);

        Table113 deletedTable113 = table113Service.delete(id);

        return deletedTable113 != null;
    }

    /**
     * @deprecated Use {@link #findTable113s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table113 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table113> searchTable113sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table113s list");
        return table113Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table113 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table113> findTable113s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table113s list");
        return table113Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table113 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table113> filterTable113s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table113s list");
        return table113Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable113s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table113Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table113 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable113s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table113s");
		return table113Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable113AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table113Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table113Service instance
	 */
	protected void setTable113Service(Table113Service service) {
		this.table113Service = service;
	}

}

