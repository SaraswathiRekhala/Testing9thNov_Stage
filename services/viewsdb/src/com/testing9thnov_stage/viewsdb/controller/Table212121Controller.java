/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Table212121;
import com.testing9thnov_stage.viewsdb.service.Table212121Service;


/**
 * Controller object for domain model class Table212121.
 * @see Table212121
 */
@RestController("viewsdb.Table212121Controller")
@Api(value = "Table212121Controller", description = "Exposes APIs to work with Table212121 resource.")
@RequestMapping("/viewsdb/Table212121")
public class Table212121Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table212121Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table212121Service")
	private Table212121Service table212121Service;

	@ApiOperation(value = "Creates a new Table212121 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table212121 createTable212121(@RequestBody Table212121 table212121) {
		LOGGER.debug("Create Table212121 with information: {}" , table212121);

		table212121 = table212121Service.create(table212121);
		LOGGER.debug("Created Table212121 with information: {}" , table212121);

	    return table212121;
	}

    @ApiOperation(value = "Returns the Table212121 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table212121 getTable212121(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table212121 with id: {}" , id);

        Table212121 foundTable212121 = table212121Service.getById(id);
        LOGGER.debug("Table212121 details with id: {}" , foundTable212121);

        return foundTable212121;
    }

    @ApiOperation(value = "Updates the Table212121 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table212121 editTable212121(@PathVariable("id") Integer id, @RequestBody Table212121 table212121) throws EntityNotFoundException {
        LOGGER.debug("Editing Table212121 with id: {}" , table212121.getId());

        table212121.setId(id);
        table212121 = table212121Service.update(table212121);
        LOGGER.debug("Table212121 details with id: {}" , table212121);

        return table212121;
    }

    @ApiOperation(value = "Deletes the Table212121 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable212121(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table212121 with id: {}" , id);

        Table212121 deletedTable212121 = table212121Service.delete(id);

        return deletedTable212121 != null;
    }

    /**
     * @deprecated Use {@link #findTable212121s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table212121 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table212121> searchTable212121sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table212121s list");
        return table212121Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table212121 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table212121> findTable212121s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table212121s list");
        return table212121Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table212121 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table212121> filterTable212121s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table212121s list");
        return table212121Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable212121s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table212121Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table212121 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable212121s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table212121s");
		return table212121Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable212121AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table212121Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table212121Service instance
	 */
	protected void setTable212121Service(Table212121Service service) {
		this.table212121Service = service;
	}

}

