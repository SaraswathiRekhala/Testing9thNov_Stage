/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Table59;
import com.testing9thnov_stage.viewsdb.service.Table59Service;


/**
 * Controller object for domain model class Table59.
 * @see Table59
 */
@RestController("viewsdb.Table59Controller")
@Api(value = "Table59Controller", description = "Exposes APIs to work with Table59 resource.")
@RequestMapping("/viewsdb/Table59")
public class Table59Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table59Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table59Service")
	private Table59Service table59Service;

	@ApiOperation(value = "Creates a new Table59 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table59 createTable59(@RequestBody Table59 table59) {
		LOGGER.debug("Create Table59 with information: {}" , table59);

		table59 = table59Service.create(table59);
		LOGGER.debug("Created Table59 with information: {}" , table59);

	    return table59;
	}

    @ApiOperation(value = "Returns the Table59 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table59 getTable59(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table59 with id: {}" , id);

        Table59 foundTable59 = table59Service.getById(id);
        LOGGER.debug("Table59 details with id: {}" , foundTable59);

        return foundTable59;
    }

    @ApiOperation(value = "Updates the Table59 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table59 editTable59(@PathVariable("id") Integer id, @RequestBody Table59 table59) throws EntityNotFoundException {
        LOGGER.debug("Editing Table59 with id: {}" , table59.getId());

        table59.setId(id);
        table59 = table59Service.update(table59);
        LOGGER.debug("Table59 details with id: {}" , table59);

        return table59;
    }

    @ApiOperation(value = "Deletes the Table59 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable59(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table59 with id: {}" , id);

        Table59 deletedTable59 = table59Service.delete(id);

        return deletedTable59 != null;
    }

    /**
     * @deprecated Use {@link #findTable59s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table59 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table59> searchTable59sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table59s list");
        return table59Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table59 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table59> findTable59s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table59s list");
        return table59Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table59 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table59> filterTable59s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table59s list");
        return table59Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable59s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table59Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table59 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable59s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table59s");
		return table59Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable59AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table59Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table59Service instance
	 */
	protected void setTable59Service(Table59Service service) {
		this.table59Service = service;
	}

}

