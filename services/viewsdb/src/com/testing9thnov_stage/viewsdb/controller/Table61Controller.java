/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Table60;
import com.testing9thnov_stage.viewsdb.Table61;
import com.testing9thnov_stage.viewsdb.service.Table61Service;


/**
 * Controller object for domain model class Table61.
 * @see Table61
 */
@RestController("viewsdb.Table61Controller")
@Api(value = "Table61Controller", description = "Exposes APIs to work with Table61 resource.")
@RequestMapping("/viewsdb/Table61")
public class Table61Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table61Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table61Service")
	private Table61Service table61Service;

	@ApiOperation(value = "Creates a new Table61 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table61 createTable61(@RequestBody Table61 table61) {
		LOGGER.debug("Create Table61 with information: {}" , table61);

		table61 = table61Service.create(table61);
		LOGGER.debug("Created Table61 with information: {}" , table61);

	    return table61;
	}

    @ApiOperation(value = "Returns the Table61 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table61 getTable61(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table61 with id: {}" , id);

        Table61 foundTable61 = table61Service.getById(id);
        LOGGER.debug("Table61 details with id: {}" , foundTable61);

        return foundTable61;
    }

    @ApiOperation(value = "Updates the Table61 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table61 editTable61(@PathVariable("id") Integer id, @RequestBody Table61 table61) throws EntityNotFoundException {
        LOGGER.debug("Editing Table61 with id: {}" , table61.getId());

        table61.setId(id);
        table61 = table61Service.update(table61);
        LOGGER.debug("Table61 details with id: {}" , table61);

        return table61;
    }

    @ApiOperation(value = "Deletes the Table61 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable61(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table61 with id: {}" , id);

        Table61 deletedTable61 = table61Service.delete(id);

        return deletedTable61 != null;
    }

    /**
     * @deprecated Use {@link #findTable61s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table61 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table61> searchTable61sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table61s list");
        return table61Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table61 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table61> findTable61s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table61s list");
        return table61Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table61 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table61> filterTable61s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table61s list");
        return table61Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable61s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table61Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table61 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable61s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table61s");
		return table61Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable61AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table61Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/table60s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the table60s instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table60> findAssociatedTable60s(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated table60s");
        return table61Service.findAssociatedTable60s(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table61Service instance
	 */
	protected void setTable61Service(Table61Service service) {
		this.table61Service = service;
	}

}

