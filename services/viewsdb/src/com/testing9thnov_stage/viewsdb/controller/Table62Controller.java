/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Table62;
import com.testing9thnov_stage.viewsdb.service.Table62Service;


/**
 * Controller object for domain model class Table62.
 * @see Table62
 */
@RestController("viewsdb.Table62Controller")
@Api(value = "Table62Controller", description = "Exposes APIs to work with Table62 resource.")
@RequestMapping("/viewsdb/Table62")
public class Table62Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table62Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table62Service")
	private Table62Service table62Service;

	@ApiOperation(value = "Creates a new Table62 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table62 createTable62(@RequestBody Table62 table62) {
		LOGGER.debug("Create Table62 with information: {}" , table62);

		table62 = table62Service.create(table62);
		LOGGER.debug("Created Table62 with information: {}" , table62);

	    return table62;
	}

    @ApiOperation(value = "Returns the Table62 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table62 getTable62(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table62 with id: {}" , id);

        Table62 foundTable62 = table62Service.getById(id);
        LOGGER.debug("Table62 details with id: {}" , foundTable62);

        return foundTable62;
    }

    @ApiOperation(value = "Updates the Table62 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table62 editTable62(@PathVariable("id") String id, @RequestBody Table62 table62) throws EntityNotFoundException {
        LOGGER.debug("Editing Table62 with id: {}" , table62.getColumn2());

        table62.setColumn2(id);
        table62 = table62Service.update(table62);
        LOGGER.debug("Table62 details with id: {}" , table62);

        return table62;
    }

    @ApiOperation(value = "Deletes the Table62 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable62(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table62 with id: {}" , id);

        Table62 deletedTable62 = table62Service.delete(id);

        return deletedTable62 != null;
    }

    /**
     * @deprecated Use {@link #findTable62s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table62 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table62> searchTable62sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table62s list");
        return table62Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table62 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table62> findTable62s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table62s list");
        return table62Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table62 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table62> filterTable62s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table62s list");
        return table62Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable62s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table62Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table62 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable62s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table62s");
		return table62Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable62AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table62Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table62Service instance
	 */
	protected void setTable62Service(Table62Service service) {
		this.table62Service = service;
	}

}

