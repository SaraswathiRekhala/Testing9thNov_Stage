/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.TestNopk;
import com.testing9thnov_stage.viewsdb.service.TestNopkService;


/**
 * Controller object for domain model class TestNopk.
 * @see TestNopk
 */
@RestController("viewsdb.TestNopkController")
@Api(value = "TestNopkController", description = "Exposes APIs to work with TestNopk resource.")
@RequestMapping("/viewsdb/TestNopk")
public class TestNopkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestNopkController.class);

    @Autowired
	@Qualifier("viewsdb.TestNopkService")
	private TestNopkService testNopkService;

	@ApiOperation(value = "Creates a new TestNopk instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TestNopk createTestNopk(@RequestBody TestNopk testNopk) {
		LOGGER.debug("Create TestNopk with information: {}" , testNopk);

		testNopk = testNopkService.create(testNopk);
		LOGGER.debug("Created TestNopk with information: {}" , testNopk);

	    return testNopk;
	}

    @ApiOperation(value = "Returns the TestNopk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestNopk getTestNopk(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestNopk with id: {}" , id);

        TestNopk foundTestNopk = testNopkService.getById(id);
        LOGGER.debug("TestNopk details with id: {}" , foundTestNopk);

        return foundTestNopk;
    }

    @ApiOperation(value = "Updates the TestNopk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestNopk editTestNopk(@PathVariable("id") Integer id, @RequestBody TestNopk testNopk) throws EntityNotFoundException {
        LOGGER.debug("Editing TestNopk with id: {}" , testNopk.getId());

        testNopk.setId(id);
        testNopk = testNopkService.update(testNopk);
        LOGGER.debug("TestNopk details with id: {}" , testNopk);

        return testNopk;
    }

    @ApiOperation(value = "Deletes the TestNopk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestNopk(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestNopk with id: {}" , id);

        TestNopk deletedTestNopk = testNopkService.delete(id);

        return deletedTestNopk != null;
    }

    /**
     * @deprecated Use {@link #findTestNopks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TestNopk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestNopk> searchTestNopksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestNopks list");
        return testNopkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestNopk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestNopk> findTestNopks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestNopks list");
        return testNopkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestNopk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestNopk> filterTestNopks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestNopks list");
        return testNopkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestNopks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testNopkService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TestNopk instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestNopks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TestNopks");
		return testNopkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestNopkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testNopkService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestNopkService instance
	 */
	protected void setTestNopkService(TestNopkService service) {
		this.testNopkService = service;
	}

}

