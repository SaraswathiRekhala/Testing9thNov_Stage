/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.TestTableName;
import com.testing9thnov_stage.viewsdb.service.TestTableNameService;


/**
 * Controller object for domain model class TestTableName.
 * @see TestTableName
 */
@RestController("viewsdb.TestTableNameController")
@Api(value = "TestTableNameController", description = "Exposes APIs to work with TestTableName resource.")
@RequestMapping("/viewsdb/TestTableName")
public class TestTableNameController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestTableNameController.class);

    @Autowired
	@Qualifier("viewsdb.TestTableNameService")
	private TestTableNameService testTableNameService;

	@ApiOperation(value = "Creates a new TestTableName instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TestTableName createTestTableName(@RequestBody TestTableName testTableName) {
		LOGGER.debug("Create TestTableName with information: {}" , testTableName);

		testTableName = testTableNameService.create(testTableName);
		LOGGER.debug("Created TestTableName with information: {}" , testTableName);

	    return testTableName;
	}

    @ApiOperation(value = "Returns the TestTableName instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestTableName getTestTableName(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestTableName with id: {}" , id);

        TestTableName foundTestTableName = testTableNameService.getById(id);
        LOGGER.debug("TestTableName details with id: {}" , foundTestTableName);

        return foundTestTableName;
    }

    @ApiOperation(value = "Updates the TestTableName instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestTableName editTestTableName(@PathVariable("id") Integer id, @RequestBody TestTableName testTableName) throws EntityNotFoundException {
        LOGGER.debug("Editing TestTableName with id: {}" , testTableName.getId());

        testTableName.setId(id);
        testTableName = testTableNameService.update(testTableName);
        LOGGER.debug("TestTableName details with id: {}" , testTableName);

        return testTableName;
    }

    @ApiOperation(value = "Deletes the TestTableName instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestTableName(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestTableName with id: {}" , id);

        TestTableName deletedTestTableName = testTableNameService.delete(id);

        return deletedTestTableName != null;
    }

    @RequestMapping(value = "/column2/{column2}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TestTableName with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestTableName getByColumn2(@PathVariable("column2") String column2) {
        LOGGER.debug("Getting TestTableName with uniques key Column2");
        return testTableNameService.getByColumn2(column2);
    }

    /**
     * @deprecated Use {@link #findTestTableNames(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TestTableName instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestTableName> searchTestTableNamesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestTableNames list");
        return testTableNameService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestTableName instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestTableName> findTestTableNames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestTableNames list");
        return testTableNameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestTableName instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestTableName> filterTestTableNames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestTableNames list");
        return testTableNameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestTableNames(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testTableNameService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TestTableName instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestTableNames( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TestTableNames");
		return testTableNameService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestTableNameAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testTableNameService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestTableNameService instance
	 */
	protected void setTestTableNameService(TestTableNameService service) {
		this.testTableNameService = service;
	}

}

