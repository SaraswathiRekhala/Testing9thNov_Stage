/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.sql.Time;
import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Testfunctionaldefaults;
import com.testing9thnov_stage.viewsdb.TestfunctionaldefaultsId;
import com.testing9thnov_stage.viewsdb.service.TestfunctionaldefaultsService;


/**
 * Controller object for domain model class Testfunctionaldefaults.
 * @see Testfunctionaldefaults
 */
@RestController("viewsdb.TestfunctionaldefaultsController")
@Api(value = "TestfunctionaldefaultsController", description = "Exposes APIs to work with Testfunctionaldefaults resource.")
@RequestMapping("/viewsdb/Testfunctionaldefaults")
public class TestfunctionaldefaultsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestfunctionaldefaultsController.class);

    @Autowired
	@Qualifier("viewsdb.TestfunctionaldefaultsService")
	private TestfunctionaldefaultsService testfunctionaldefaultsService;

	@ApiOperation(value = "Creates a new Testfunctionaldefaults instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Testfunctionaldefaults createTestfunctionaldefaults(@RequestBody Testfunctionaldefaults testfunctionaldefaults) {
		LOGGER.debug("Create Testfunctionaldefaults with information: {}" , testfunctionaldefaults);

		testfunctionaldefaults = testfunctionaldefaultsService.create(testfunctionaldefaults);
		LOGGER.debug("Created Testfunctionaldefaults with information: {}" , testfunctionaldefaults);

	    return testfunctionaldefaults;
	}

@ApiOperation(value = "Returns the Testfunctionaldefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testfunctionaldefaults getTestfunctionaldefaults(@RequestParam("id") Integer id,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timecol") Time timecol,@RequestParam("datecol") Date datecol,@RequestParam("localtimecol") Time localtimecol,@RequestParam("localtimestampcol") LocalDateTime localtimestampcol) throws EntityNotFoundException {

        TestfunctionaldefaultsId testfunctionaldefaultsId = new TestfunctionaldefaultsId();
        testfunctionaldefaultsId.setId(id);
        testfunctionaldefaultsId.setTimestampcol(timestampcol);
        testfunctionaldefaultsId.setTimecol(timecol);
        testfunctionaldefaultsId.setDatecol(datecol);
        testfunctionaldefaultsId.setLocaltimecol(localtimecol);
        testfunctionaldefaultsId.setLocaltimestampcol(localtimestampcol);

        LOGGER.debug("Getting Testfunctionaldefaults with id: {}" , testfunctionaldefaultsId);
        Testfunctionaldefaults testfunctionaldefaults = testfunctionaldefaultsService.getById(testfunctionaldefaultsId);
        LOGGER.debug("Testfunctionaldefaults details with id: {}" , testfunctionaldefaults);

        return testfunctionaldefaults;
    }



    @ApiOperation(value = "Updates the Testfunctionaldefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testfunctionaldefaults editTestfunctionaldefaults(@RequestParam("id") Integer id,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timecol") Time timecol,@RequestParam("datecol") Date datecol,@RequestParam("localtimecol") Time localtimecol,@RequestParam("localtimestampcol") LocalDateTime localtimestampcol, @RequestBody Testfunctionaldefaults testfunctionaldefaults) throws EntityNotFoundException {

        testfunctionaldefaults.setId(id);
        testfunctionaldefaults.setTimestampcol(timestampcol);
        testfunctionaldefaults.setTimecol(timecol);
        testfunctionaldefaults.setDatecol(datecol);
        testfunctionaldefaults.setLocaltimecol(localtimecol);
        testfunctionaldefaults.setLocaltimestampcol(localtimestampcol);

        LOGGER.debug("Testfunctionaldefaults details with id is updated with: {}" , testfunctionaldefaults);

        return testfunctionaldefaultsService.update(testfunctionaldefaults);
    }


    @ApiOperation(value = "Deletes the Testfunctionaldefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestfunctionaldefaults(@RequestParam("id") Integer id,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timecol") Time timecol,@RequestParam("datecol") Date datecol,@RequestParam("localtimecol") Time localtimecol,@RequestParam("localtimestampcol") LocalDateTime localtimestampcol) throws EntityNotFoundException {

        TestfunctionaldefaultsId testfunctionaldefaultsId = new TestfunctionaldefaultsId();
        testfunctionaldefaultsId.setId(id);
        testfunctionaldefaultsId.setTimestampcol(timestampcol);
        testfunctionaldefaultsId.setTimecol(timecol);
        testfunctionaldefaultsId.setDatecol(datecol);
        testfunctionaldefaultsId.setLocaltimecol(localtimecol);
        testfunctionaldefaultsId.setLocaltimestampcol(localtimestampcol);

        LOGGER.debug("Deleting Testfunctionaldefaults with id: {}" , testfunctionaldefaultsId);
        Testfunctionaldefaults testfunctionaldefaults = testfunctionaldefaultsService.delete(testfunctionaldefaultsId);

        return testfunctionaldefaults != null;
    }


    /**
     * @deprecated Use {@link #findTestfunctionaldefaults(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testfunctionaldefaults instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testfunctionaldefaults> searchTestfunctionaldefaultsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testfunctionaldefaults list");
        return testfunctionaldefaultsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testfunctionaldefaults instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testfunctionaldefaults> findTestfunctionaldefaults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testfunctionaldefaults list");
        return testfunctionaldefaultsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testfunctionaldefaults instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testfunctionaldefaults> filterTestfunctionaldefaults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testfunctionaldefaults list");
        return testfunctionaldefaultsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestfunctionaldefaults(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testfunctionaldefaultsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testfunctionaldefaults instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestfunctionaldefaults( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testfunctionaldefaults");
		return testfunctionaldefaultsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestfunctionaldefaultsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testfunctionaldefaultsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestfunctionaldefaultsService instance
	 */
	protected void setTestfunctionaldefaultsService(TestfunctionaldefaultsService service) {
		this.testfunctionaldefaultsService = service;
	}

}

