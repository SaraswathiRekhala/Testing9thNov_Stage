/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing9thnov_stage.viewsdb.Testrelationdifftypes;
import com.testing9thnov_stage.viewsdb.service.TestrelationdifftypesService;


/**
 * Controller object for domain model class Testrelationdifftypes.
 * @see Testrelationdifftypes
 */
@RestController("viewsdb.TestrelationdifftypesController")
@Api(value = "TestrelationdifftypesController", description = "Exposes APIs to work with Testrelationdifftypes resource.")
@RequestMapping("/viewsdb/Testrelationdifftypes")
public class TestrelationdifftypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestrelationdifftypesController.class);

    @Autowired
	@Qualifier("viewsdb.TestrelationdifftypesService")
	private TestrelationdifftypesService testrelationdifftypesService;

	@ApiOperation(value = "Creates a new Testrelationdifftypes instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Testrelationdifftypes createTestrelationdifftypes(@RequestBody Testrelationdifftypes testrelationdifftypes) {
		LOGGER.debug("Create Testrelationdifftypes with information: {}" , testrelationdifftypes);

		testrelationdifftypes = testrelationdifftypesService.create(testrelationdifftypes);
		LOGGER.debug("Created Testrelationdifftypes with information: {}" , testrelationdifftypes);

	    return testrelationdifftypes;
	}

    @ApiOperation(value = "Returns the Testrelationdifftypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelationdifftypes getTestrelationdifftypes(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting Testrelationdifftypes with id: {}" , id);

        Testrelationdifftypes foundTestrelationdifftypes = testrelationdifftypesService.getById(id);
        LOGGER.debug("Testrelationdifftypes details with id: {}" , foundTestrelationdifftypes);

        return foundTestrelationdifftypes;
    }

    @ApiOperation(value = "Updates the Testrelationdifftypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testrelationdifftypes editTestrelationdifftypes(@PathVariable("id") Short id, @RequestBody Testrelationdifftypes testrelationdifftypes) throws EntityNotFoundException {
        LOGGER.debug("Editing Testrelationdifftypes with id: {}" , testrelationdifftypes.getNumericcol());

        testrelationdifftypes.setNumericcol(id);
        testrelationdifftypes = testrelationdifftypesService.update(testrelationdifftypes);
        LOGGER.debug("Testrelationdifftypes details with id: {}" , testrelationdifftypes);

        return testrelationdifftypes;
    }

    @ApiOperation(value = "Deletes the Testrelationdifftypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestrelationdifftypes(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testrelationdifftypes with id: {}" , id);

        Testrelationdifftypes deletedTestrelationdifftypes = testrelationdifftypesService.delete(id);

        return deletedTestrelationdifftypes != null;
    }

    /**
     * @deprecated Use {@link #findTestrelationdifftypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testrelationdifftypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelationdifftypes> searchTestrelationdifftypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testrelationdifftypes list");
        return testrelationdifftypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelationdifftypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelationdifftypes> findTestrelationdifftypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelationdifftypes list");
        return testrelationdifftypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testrelationdifftypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelationdifftypes> filterTestrelationdifftypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testrelationdifftypes list");
        return testrelationdifftypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestrelationdifftypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testrelationdifftypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testrelationdifftypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestrelationdifftypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testrelationdifftypes");
		return testrelationdifftypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestrelationdifftypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testrelationdifftypesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/testrelationdifftypesesForSmallintcol", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the testrelationdifftypesesForSmallintcol instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testrelationdifftypes> findAssociatedTestrelationdifftypesesForSmallintcol(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated testrelationdifftypesesForSmallintcol");
        return testrelationdifftypesService.findAssociatedTestrelationdifftypesesForSmallintcol(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestrelationdifftypesService instance
	 */
	protected void setTestrelationdifftypesService(TestrelationdifftypesService service) {
		this.testrelationdifftypesService = service;
	}

}

