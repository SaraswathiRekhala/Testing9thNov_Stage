/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.AutoIncrementTable;
import com.testing9thnov_stage.viewsdb.AutoIncrementTableId;


/**
 * ServiceImpl object for domain model class AutoIncrementTable.
 *
 * @see AutoIncrementTable
 */
@Service("viewsdb.AutoIncrementTableService")
@Validated
public class AutoIncrementTableServiceImpl implements AutoIncrementTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoIncrementTableServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.AutoIncrementTableDao")
    private WMGenericDao<AutoIncrementTable, AutoIncrementTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AutoIncrementTable, AutoIncrementTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public AutoIncrementTable create(AutoIncrementTable autoIncrementTable) {
        LOGGER.debug("Creating a new AutoIncrementTable with information: {}", autoIncrementTable);
        AutoIncrementTable autoIncrementTableCreated = this.wmGenericDao.create(autoIncrementTable);
        return autoIncrementTableCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public AutoIncrementTable getById(AutoIncrementTableId autoincrementtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding AutoIncrementTable by id: {}", autoincrementtableId);
        AutoIncrementTable autoIncrementTable = this.wmGenericDao.findById(autoincrementtableId);
        if (autoIncrementTable == null){
            LOGGER.debug("No AutoIncrementTable found with id: {}", autoincrementtableId);
            throw new EntityNotFoundException(String.valueOf(autoincrementtableId));
        }
        return autoIncrementTable;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public AutoIncrementTable findById(AutoIncrementTableId autoincrementtableId) {
        LOGGER.debug("Finding AutoIncrementTable by id: {}", autoincrementtableId);
        return this.wmGenericDao.findById(autoincrementtableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public AutoIncrementTable update(AutoIncrementTable autoIncrementTable) throws EntityNotFoundException {
        LOGGER.debug("Updating AutoIncrementTable with information: {}", autoIncrementTable);
        this.wmGenericDao.update(autoIncrementTable);

        AutoIncrementTableId autoincrementtableId = new AutoIncrementTableId();
        autoincrementtableId.setId(autoIncrementTable.getId());
        autoincrementtableId.setName(autoIncrementTable.getName());

        return this.wmGenericDao.findById(autoincrementtableId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public AutoIncrementTable delete(AutoIncrementTableId autoincrementtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AutoIncrementTable with id: {}", autoincrementtableId);
        AutoIncrementTable deleted = this.wmGenericDao.findById(autoincrementtableId);
        if (deleted == null) {
            LOGGER.debug("No AutoIncrementTable found with id: {}", autoincrementtableId);
            throw new EntityNotFoundException(String.valueOf(autoincrementtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<AutoIncrementTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AutoIncrementTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<AutoIncrementTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AutoIncrementTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table AutoIncrementTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

