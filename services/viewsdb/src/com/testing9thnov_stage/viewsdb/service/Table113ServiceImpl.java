/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table113;


/**
 * ServiceImpl object for domain model class Table113.
 *
 * @see Table113
 */
@Service("viewsdb.Table113Service")
@Validated
public class Table113ServiceImpl implements Table113Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table113ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table113Dao")
    private WMGenericDao<Table113, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table113, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table113 create(Table113 table113) {
        LOGGER.debug("Creating a new Table113 with information: {}", table113);
        Table113 table113Created = this.wmGenericDao.create(table113);
        return table113Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table113 getById(Integer table113Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table113 by id: {}", table113Id);
        Table113 table113 = this.wmGenericDao.findById(table113Id);
        if (table113 == null){
            LOGGER.debug("No Table113 found with id: {}", table113Id);
            throw new EntityNotFoundException(String.valueOf(table113Id));
        }
        return table113;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table113 findById(Integer table113Id) {
        LOGGER.debug("Finding Table113 by id: {}", table113Id);
        return this.wmGenericDao.findById(table113Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table113 update(Table113 table113) throws EntityNotFoundException {
        LOGGER.debug("Updating Table113 with information: {}", table113);
        this.wmGenericDao.update(table113);

        Integer table113Id = table113.getId();

        return this.wmGenericDao.findById(table113Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table113 delete(Integer table113Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table113 with id: {}", table113Id);
        Table113 deleted = this.wmGenericDao.findById(table113Id);
        if (deleted == null) {
            LOGGER.debug("No Table113 found with id: {}", table113Id);
            throw new EntityNotFoundException(String.valueOf(table113Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table113> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table113s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table113> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table113s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table113 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

