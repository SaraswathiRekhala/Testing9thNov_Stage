/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table212121;


/**
 * ServiceImpl object for domain model class Table212121.
 *
 * @see Table212121
 */
@Service("viewsdb.Table212121Service")
@Validated
public class Table212121ServiceImpl implements Table212121Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table212121ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table212121Dao")
    private WMGenericDao<Table212121, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table212121, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table212121 create(Table212121 table212121) {
        LOGGER.debug("Creating a new Table212121 with information: {}", table212121);
        Table212121 table212121Created = this.wmGenericDao.create(table212121);
        return table212121Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table212121 getById(Integer table212121Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table212121 by id: {}", table212121Id);
        Table212121 table212121 = this.wmGenericDao.findById(table212121Id);
        if (table212121 == null){
            LOGGER.debug("No Table212121 found with id: {}", table212121Id);
            throw new EntityNotFoundException(String.valueOf(table212121Id));
        }
        return table212121;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table212121 findById(Integer table212121Id) {
        LOGGER.debug("Finding Table212121 by id: {}", table212121Id);
        return this.wmGenericDao.findById(table212121Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table212121 update(Table212121 table212121) throws EntityNotFoundException {
        LOGGER.debug("Updating Table212121 with information: {}", table212121);
        this.wmGenericDao.update(table212121);

        Integer table212121Id = table212121.getId();

        return this.wmGenericDao.findById(table212121Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table212121 delete(Integer table212121Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table212121 with id: {}", table212121Id);
        Table212121 deleted = this.wmGenericDao.findById(table212121Id);
        if (deleted == null) {
            LOGGER.debug("No Table212121 found with id: {}", table212121Id);
            throw new EntityNotFoundException(String.valueOf(table212121Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table212121> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table212121s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table212121> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table212121s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table212121 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

