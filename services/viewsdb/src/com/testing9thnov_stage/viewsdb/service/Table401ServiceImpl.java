/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table401;


/**
 * ServiceImpl object for domain model class Table401.
 *
 * @see Table401
 */
@Service("viewsdb.Table401Service")
@Validated
public class Table401ServiceImpl implements Table401Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table401ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table401Dao")
    private WMGenericDao<Table401, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table401, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table401 create(Table401 table401) {
        LOGGER.debug("Creating a new Table401 with information: {}", table401);
        Table401 table401Created = this.wmGenericDao.create(table401);
        return table401Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table401 getById(Integer table401Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table401 by id: {}", table401Id);
        Table401 table401 = this.wmGenericDao.findById(table401Id);
        if (table401 == null){
            LOGGER.debug("No Table401 found with id: {}", table401Id);
            throw new EntityNotFoundException(String.valueOf(table401Id));
        }
        return table401;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table401 findById(Integer table401Id) {
        LOGGER.debug("Finding Table401 by id: {}", table401Id);
        return this.wmGenericDao.findById(table401Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table401 update(Table401 table401) throws EntityNotFoundException {
        LOGGER.debug("Updating Table401 with information: {}", table401);
        this.wmGenericDao.update(table401);

        Integer table401Id = table401.getId();

        return this.wmGenericDao.findById(table401Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table401 delete(Integer table401Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table401 with id: {}", table401Id);
        Table401 deleted = this.wmGenericDao.findById(table401Id);
        if (deleted == null) {
            LOGGER.debug("No Table401 found with id: {}", table401Id);
            throw new EntityNotFoundException(String.valueOf(table401Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table401> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table401s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table401> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table401s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table401 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

