/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table59;


/**
 * ServiceImpl object for domain model class Table59.
 *
 * @see Table59
 */
@Service("viewsdb.Table59Service")
@Validated
public class Table59ServiceImpl implements Table59Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table59ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table59Dao")
    private WMGenericDao<Table59, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table59, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table59 create(Table59 table59) {
        LOGGER.debug("Creating a new Table59 with information: {}", table59);
        Table59 table59Created = this.wmGenericDao.create(table59);
        return table59Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table59 getById(Integer table59Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table59 by id: {}", table59Id);
        Table59 table59 = this.wmGenericDao.findById(table59Id);
        if (table59 == null){
            LOGGER.debug("No Table59 found with id: {}", table59Id);
            throw new EntityNotFoundException(String.valueOf(table59Id));
        }
        return table59;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table59 findById(Integer table59Id) {
        LOGGER.debug("Finding Table59 by id: {}", table59Id);
        return this.wmGenericDao.findById(table59Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table59 update(Table59 table59) throws EntityNotFoundException {
        LOGGER.debug("Updating Table59 with information: {}", table59);
        this.wmGenericDao.update(table59);

        Integer table59Id = table59.getId();

        return this.wmGenericDao.findById(table59Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table59 delete(Integer table59Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table59 with id: {}", table59Id);
        Table59 deleted = this.wmGenericDao.findById(table59Id);
        if (deleted == null) {
            LOGGER.debug("No Table59 found with id: {}", table59Id);
            throw new EntityNotFoundException(String.valueOf(table59Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table59> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table59s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table59> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table59s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table59 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

