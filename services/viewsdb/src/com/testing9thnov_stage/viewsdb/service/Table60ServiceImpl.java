/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table60;


/**
 * ServiceImpl object for domain model class Table60.
 *
 * @see Table60
 */
@Service("viewsdb.Table60Service")
@Validated
public class Table60ServiceImpl implements Table60Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table60ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table60Dao")
    private WMGenericDao<Table60, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table60, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table60 create(Table60 table60) {
        LOGGER.debug("Creating a new Table60 with information: {}", table60);
        Table60 table60Created = this.wmGenericDao.create(table60);
        return table60Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table60 getById(Integer table60Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table60 by id: {}", table60Id);
        Table60 table60 = this.wmGenericDao.findById(table60Id);
        if (table60 == null){
            LOGGER.debug("No Table60 found with id: {}", table60Id);
            throw new EntityNotFoundException(String.valueOf(table60Id));
        }
        return table60;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table60 findById(Integer table60Id) {
        LOGGER.debug("Finding Table60 by id: {}", table60Id);
        return this.wmGenericDao.findById(table60Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table60 update(Table60 table60) throws EntityNotFoundException {
        LOGGER.debug("Updating Table60 with information: {}", table60);
        this.wmGenericDao.update(table60);

        Integer table60Id = table60.getId();

        return this.wmGenericDao.findById(table60Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table60 delete(Integer table60Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table60 with id: {}", table60Id);
        Table60 deleted = this.wmGenericDao.findById(table60Id);
        if (deleted == null) {
            LOGGER.debug("No Table60 found with id: {}", table60Id);
            throw new EntityNotFoundException(String.valueOf(table60Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table60> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table60s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table60> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table60s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table60 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

