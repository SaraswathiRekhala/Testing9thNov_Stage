/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table60;
import com.testing9thnov_stage.viewsdb.Table61;


/**
 * ServiceImpl object for domain model class Table61.
 *
 * @see Table61
 */
@Service("viewsdb.Table61Service")
@Validated
public class Table61ServiceImpl implements Table61Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table61ServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("viewsdb.Table60Service")
	private Table60Service table60Service;

    @Autowired
    @Qualifier("viewsdb.Table61Dao")
    private WMGenericDao<Table61, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table61, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table61 create(Table61 table61) {
        LOGGER.debug("Creating a new Table61 with information: {}", table61);
        Table61 table61Created = this.wmGenericDao.create(table61);
        if(table61Created.getTable60s() != null) {
            for(Table60 table60 : table61Created.getTable60s()) {
                table60.setTable61(table61Created);
                LOGGER.debug("Creating a new child Table60 with information: {}", table60);
                table60Service.create(table60);
            }
        }
        return table61Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table61 getById(Integer table61Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table61 by id: {}", table61Id);
        Table61 table61 = this.wmGenericDao.findById(table61Id);
        if (table61 == null){
            LOGGER.debug("No Table61 found with id: {}", table61Id);
            throw new EntityNotFoundException(String.valueOf(table61Id));
        }
        return table61;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table61 findById(Integer table61Id) {
        LOGGER.debug("Finding Table61 by id: {}", table61Id);
        return this.wmGenericDao.findById(table61Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table61 update(Table61 table61) throws EntityNotFoundException {
        LOGGER.debug("Updating Table61 with information: {}", table61);
        this.wmGenericDao.update(table61);

        Integer table61Id = table61.getId();

        return this.wmGenericDao.findById(table61Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table61 delete(Integer table61Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table61 with id: {}", table61Id);
        Table61 deleted = this.wmGenericDao.findById(table61Id);
        if (deleted == null) {
            LOGGER.debug("No Table61 found with id: {}", table61Id);
            throw new EntityNotFoundException(String.valueOf(table61Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table61> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table61s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table61> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table61s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table61 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table60> findAssociatedTable60s(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated table60s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("table61.id = '" + id + "'");

        return table60Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table60Service instance
	 */
	protected void setTable60Service(Table60Service service) {
        this.table60Service = service;
    }

}

