/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table62;


/**
 * ServiceImpl object for domain model class Table62.
 *
 * @see Table62
 */
@Service("viewsdb.Table62Service")
@Validated
public class Table62ServiceImpl implements Table62Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table62ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table62Dao")
    private WMGenericDao<Table62, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table62, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table62 create(Table62 table62) {
        LOGGER.debug("Creating a new Table62 with information: {}", table62);
        Table62 table62Created = this.wmGenericDao.create(table62);
        return table62Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table62 getById(String table62Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table62 by id: {}", table62Id);
        Table62 table62 = this.wmGenericDao.findById(table62Id);
        if (table62 == null){
            LOGGER.debug("No Table62 found with id: {}", table62Id);
            throw new EntityNotFoundException(String.valueOf(table62Id));
        }
        return table62;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table62 findById(String table62Id) {
        LOGGER.debug("Finding Table62 by id: {}", table62Id);
        return this.wmGenericDao.findById(table62Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table62 update(Table62 table62) throws EntityNotFoundException {
        LOGGER.debug("Updating Table62 with information: {}", table62);
        this.wmGenericDao.update(table62);

        String table62Id = table62.getColumn2();

        return this.wmGenericDao.findById(table62Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table62 delete(String table62Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table62 with id: {}", table62Id);
        Table62 deleted = this.wmGenericDao.findById(table62Id);
        if (deleted == null) {
            LOGGER.debug("No Table62 found with id: {}", table62Id);
            throw new EntityNotFoundException(String.valueOf(table62Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table62> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table62s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table62> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table62s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table62 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

