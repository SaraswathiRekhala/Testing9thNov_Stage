/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table63;
import com.testing9thnov_stage.viewsdb.Table63Id;

/**
 * Service object for domain model class {@link Table63}.
 */
public interface Table63Service {

    /**
     * Creates a new Table63. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table63 if any.
     *
     * @param table63 Details of the Table63 to be created; value cannot be null.
     * @return The newly created Table63.
     */
	Table63 create(@Valid Table63 table63);


	/**
	 * Returns Table63 by given id if exists.
	 *
	 * @param table63Id The id of the Table63 to get; value cannot be null.
	 * @return Table63 associated with the given table63Id.
     * @throws EntityNotFoundException If no Table63 is found.
	 */
	Table63 getById(Table63Id table63Id) throws EntityNotFoundException;

    /**
	 * Find and return the Table63 by given id if exists, returns null otherwise.
	 *
	 * @param table63Id The id of the Table63 to get; value cannot be null.
	 * @return Table63 associated with the given table63Id.
	 */
	Table63 findById(Table63Id table63Id);


	/**
	 * Updates the details of an existing Table63. It replaces all fields of the existing Table63 with the given table63.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Table63 if any.
     *
	 * @param table63 The details of the Table63 to be updated; value cannot be null.
	 * @return The updated Table63.
	 * @throws EntityNotFoundException if no Table63 is found with given input.
	 */
	Table63 update(@Valid Table63 table63) throws EntityNotFoundException;

    /**
	 * Deletes an existing Table63 with the given id.
	 *
	 * @param table63Id The id of the Table63 to be deleted; value cannot be null.
	 * @return The deleted Table63.
	 * @throws EntityNotFoundException if no Table63 found with the given id.
	 */
	Table63 delete(Table63Id table63Id) throws EntityNotFoundException;

	/**
	 * Find all Table63s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table63s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Table63> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Table63s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table63s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Table63> findAll(String query, Pageable pageable);

    /**
	 * Exports all Table63s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table63s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Table63.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

