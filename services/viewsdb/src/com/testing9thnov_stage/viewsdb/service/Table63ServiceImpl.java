/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Table63;
import com.testing9thnov_stage.viewsdb.Table63Id;


/**
 * ServiceImpl object for domain model class Table63.
 *
 * @see Table63
 */
@Service("viewsdb.Table63Service")
@Validated
public class Table63ServiceImpl implements Table63Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table63ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table63Dao")
    private WMGenericDao<Table63, Table63Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table63, Table63Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table63 create(Table63 table63) {
        LOGGER.debug("Creating a new Table63 with information: {}", table63);
        Table63 table63Created = this.wmGenericDao.create(table63);
        return table63Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table63 getById(Table63Id table63Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table63 by id: {}", table63Id);
        Table63 table63 = this.wmGenericDao.findById(table63Id);
        if (table63 == null){
            LOGGER.debug("No Table63 found with id: {}", table63Id);
            throw new EntityNotFoundException(String.valueOf(table63Id));
        }
        return table63;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table63 findById(Table63Id table63Id) {
        LOGGER.debug("Finding Table63 by id: {}", table63Id);
        return this.wmGenericDao.findById(table63Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table63 update(Table63 table63) throws EntityNotFoundException {
        LOGGER.debug("Updating Table63 with information: {}", table63);
        this.wmGenericDao.update(table63);

        Table63Id table63Id = new Table63Id();
        table63Id.setColumn2(table63.getColumn2());
        table63Id.setColumn3(table63.getColumn3());

        return this.wmGenericDao.findById(table63Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table63 delete(Table63Id table63Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table63 with id: {}", table63Id);
        Table63 deleted = this.wmGenericDao.findById(table63Id);
        if (deleted == null) {
            LOGGER.debug("No Table63 found with id: {}", table63Id);
            throw new EntityNotFoundException(String.valueOf(table63Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table63> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table63s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table63> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table63s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table63 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

