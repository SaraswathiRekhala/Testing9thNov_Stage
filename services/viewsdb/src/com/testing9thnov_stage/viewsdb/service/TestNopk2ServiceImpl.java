/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.TestNopk2;


/**
 * ServiceImpl object for domain model class TestNopk2.
 *
 * @see TestNopk2
 */
@Service("viewsdb.TestNopk2Service")
@Validated
public class TestNopk2ServiceImpl implements TestNopk2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestNopk2ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.TestNopk2Dao")
    private WMGenericDao<TestNopk2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestNopk2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public TestNopk2 create(TestNopk2 testNopk2) {
        LOGGER.debug("Creating a new TestNopk2 with information: {}", testNopk2);
        TestNopk2 testNopk2Created = this.wmGenericDao.create(testNopk2);
        return testNopk2Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public TestNopk2 getById(Integer testnopk2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding TestNopk2 by id: {}", testnopk2Id);
        TestNopk2 testNopk2 = this.wmGenericDao.findById(testnopk2Id);
        if (testNopk2 == null){
            LOGGER.debug("No TestNopk2 found with id: {}", testnopk2Id);
            throw new EntityNotFoundException(String.valueOf(testnopk2Id));
        }
        return testNopk2;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public TestNopk2 findById(Integer testnopk2Id) {
        LOGGER.debug("Finding TestNopk2 by id: {}", testnopk2Id);
        return this.wmGenericDao.findById(testnopk2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public TestNopk2 update(TestNopk2 testNopk2) throws EntityNotFoundException {
        LOGGER.debug("Updating TestNopk2 with information: {}", testNopk2);
        this.wmGenericDao.update(testNopk2);

        Integer testnopk2Id = testNopk2.getId();

        return this.wmGenericDao.findById(testnopk2Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public TestNopk2 delete(Integer testnopk2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestNopk2 with id: {}", testnopk2Id);
        TestNopk2 deleted = this.wmGenericDao.findById(testnopk2Id);
        if (deleted == null) {
            LOGGER.debug("No TestNopk2 found with id: {}", testnopk2Id);
            throw new EntityNotFoundException(String.valueOf(testnopk2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<TestNopk2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestNopk2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<TestNopk2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestNopk2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table TestNopk2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

