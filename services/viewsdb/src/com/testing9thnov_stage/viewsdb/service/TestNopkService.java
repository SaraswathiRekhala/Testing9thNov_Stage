/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.TestNopk;

/**
 * Service object for domain model class {@link TestNopk}.
 */
public interface TestNopkService {

    /**
     * Creates a new TestNopk. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TestNopk if any.
     *
     * @param testNopk Details of the TestNopk to be created; value cannot be null.
     * @return The newly created TestNopk.
     */
	TestNopk create(@Valid TestNopk testNopk);


	/**
	 * Returns TestNopk by given id if exists.
	 *
	 * @param testnopkId The id of the TestNopk to get; value cannot be null.
	 * @return TestNopk associated with the given testnopkId.
     * @throws EntityNotFoundException If no TestNopk is found.
	 */
	TestNopk getById(Integer testnopkId) throws EntityNotFoundException;

    /**
	 * Find and return the TestNopk by given id if exists, returns null otherwise.
	 *
	 * @param testnopkId The id of the TestNopk to get; value cannot be null.
	 * @return TestNopk associated with the given testnopkId.
	 */
	TestNopk findById(Integer testnopkId);


	/**
	 * Updates the details of an existing TestNopk. It replaces all fields of the existing TestNopk with the given testNopk.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TestNopk if any.
     *
	 * @param testNopk The details of the TestNopk to be updated; value cannot be null.
	 * @return The updated TestNopk.
	 * @throws EntityNotFoundException if no TestNopk is found with given input.
	 */
	TestNopk update(@Valid TestNopk testNopk) throws EntityNotFoundException;

    /**
	 * Deletes an existing TestNopk with the given id.
	 *
	 * @param testnopkId The id of the TestNopk to be deleted; value cannot be null.
	 * @return The deleted TestNopk.
	 * @throws EntityNotFoundException if no TestNopk found with the given id.
	 */
	TestNopk delete(Integer testnopkId) throws EntityNotFoundException;

	/**
	 * Find all TestNopks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestNopks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TestNopk> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TestNopks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestNopks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TestNopk> findAll(String query, Pageable pageable);

    /**
	 * Exports all TestNopks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TestNopks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TestNopk.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

