/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.TestNopk;


/**
 * ServiceImpl object for domain model class TestNopk.
 *
 * @see TestNopk
 */
@Service("viewsdb.TestNopkService")
@Validated
public class TestNopkServiceImpl implements TestNopkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestNopkServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.TestNopkDao")
    private WMGenericDao<TestNopk, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestNopk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public TestNopk create(TestNopk testNopk) {
        LOGGER.debug("Creating a new TestNopk with information: {}", testNopk);
        TestNopk testNopkCreated = this.wmGenericDao.create(testNopk);
        return testNopkCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public TestNopk getById(Integer testnopkId) throws EntityNotFoundException {
        LOGGER.debug("Finding TestNopk by id: {}", testnopkId);
        TestNopk testNopk = this.wmGenericDao.findById(testnopkId);
        if (testNopk == null){
            LOGGER.debug("No TestNopk found with id: {}", testnopkId);
            throw new EntityNotFoundException(String.valueOf(testnopkId));
        }
        return testNopk;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public TestNopk findById(Integer testnopkId) {
        LOGGER.debug("Finding TestNopk by id: {}", testnopkId);
        return this.wmGenericDao.findById(testnopkId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public TestNopk update(TestNopk testNopk) throws EntityNotFoundException {
        LOGGER.debug("Updating TestNopk with information: {}", testNopk);
        this.wmGenericDao.update(testNopk);

        Integer testnopkId = testNopk.getId();

        return this.wmGenericDao.findById(testnopkId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public TestNopk delete(Integer testnopkId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestNopk with id: {}", testnopkId);
        TestNopk deleted = this.wmGenericDao.findById(testnopkId);
        if (deleted == null) {
            LOGGER.debug("No TestNopk found with id: {}", testnopkId);
            throw new EntityNotFoundException(String.valueOf(testnopkId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<TestNopk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestNopks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<TestNopk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestNopks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table TestNopk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

