/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.TestTableName;

/**
 * Service object for domain model class {@link TestTableName}.
 */
public interface TestTableNameService {

    /**
     * Creates a new TestTableName. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TestTableName if any.
     *
     * @param testTableName Details of the TestTableName to be created; value cannot be null.
     * @return The newly created TestTableName.
     */
	TestTableName create(@Valid TestTableName testTableName);


	/**
	 * Returns TestTableName by given id if exists.
	 *
	 * @param testtablenameId The id of the TestTableName to get; value cannot be null.
	 * @return TestTableName associated with the given testtablenameId.
     * @throws EntityNotFoundException If no TestTableName is found.
	 */
	TestTableName getById(Integer testtablenameId) throws EntityNotFoundException;

    /**
	 * Find and return the TestTableName by given id if exists, returns null otherwise.
	 *
	 * @param testtablenameId The id of the TestTableName to get; value cannot be null.
	 * @return TestTableName associated with the given testtablenameId.
	 */
	TestTableName findById(Integer testtablenameId);

    /**
	 * Find and return the TestTableName for given column2  if exists.
	 *
	 * @param column2 value of column2; value cannot be null.
	 * @return TestTableName associated with the given inputs.
     * @throws EntityNotFoundException if no matching TestTableName found.
	 */
    TestTableName getByColumn2(String column2)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing TestTableName. It replaces all fields of the existing TestTableName with the given testTableName.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TestTableName if any.
     *
	 * @param testTableName The details of the TestTableName to be updated; value cannot be null.
	 * @return The updated TestTableName.
	 * @throws EntityNotFoundException if no TestTableName is found with given input.
	 */
	TestTableName update(@Valid TestTableName testTableName) throws EntityNotFoundException;

    /**
	 * Deletes an existing TestTableName with the given id.
	 *
	 * @param testtablenameId The id of the TestTableName to be deleted; value cannot be null.
	 * @return The deleted TestTableName.
	 * @throws EntityNotFoundException if no TestTableName found with the given id.
	 */
	TestTableName delete(Integer testtablenameId) throws EntityNotFoundException;

	/**
	 * Find all TestTableNames matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestTableNames.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TestTableName> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TestTableNames matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestTableNames.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TestTableName> findAll(String query, Pageable pageable);

    /**
	 * Exports all TestTableNames matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TestTableNames in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TestTableName.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

