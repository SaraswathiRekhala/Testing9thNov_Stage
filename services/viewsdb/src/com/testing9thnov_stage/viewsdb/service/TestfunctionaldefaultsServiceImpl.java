/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Testfunctionaldefaults;
import com.testing9thnov_stage.viewsdb.TestfunctionaldefaultsId;


/**
 * ServiceImpl object for domain model class Testfunctionaldefaults.
 *
 * @see Testfunctionaldefaults
 */
@Service("viewsdb.TestfunctionaldefaultsService")
@Validated
public class TestfunctionaldefaultsServiceImpl implements TestfunctionaldefaultsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestfunctionaldefaultsServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.TestfunctionaldefaultsDao")
    private WMGenericDao<Testfunctionaldefaults, TestfunctionaldefaultsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Testfunctionaldefaults, TestfunctionaldefaultsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Testfunctionaldefaults create(Testfunctionaldefaults testfunctionaldefaults) {
        LOGGER.debug("Creating a new Testfunctionaldefaults with information: {}", testfunctionaldefaults);
        Testfunctionaldefaults testfunctionaldefaultsCreated = this.wmGenericDao.create(testfunctionaldefaults);
        return testfunctionaldefaultsCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Testfunctionaldefaults getById(TestfunctionaldefaultsId testfunctionaldefaultsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Testfunctionaldefaults by id: {}", testfunctionaldefaultsId);
        Testfunctionaldefaults testfunctionaldefaults = this.wmGenericDao.findById(testfunctionaldefaultsId);
        if (testfunctionaldefaults == null){
            LOGGER.debug("No Testfunctionaldefaults found with id: {}", testfunctionaldefaultsId);
            throw new EntityNotFoundException(String.valueOf(testfunctionaldefaultsId));
        }
        return testfunctionaldefaults;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Testfunctionaldefaults findById(TestfunctionaldefaultsId testfunctionaldefaultsId) {
        LOGGER.debug("Finding Testfunctionaldefaults by id: {}", testfunctionaldefaultsId);
        return this.wmGenericDao.findById(testfunctionaldefaultsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Testfunctionaldefaults update(Testfunctionaldefaults testfunctionaldefaults) throws EntityNotFoundException {
        LOGGER.debug("Updating Testfunctionaldefaults with information: {}", testfunctionaldefaults);
        this.wmGenericDao.update(testfunctionaldefaults);

        TestfunctionaldefaultsId testfunctionaldefaultsId = new TestfunctionaldefaultsId();
        testfunctionaldefaultsId.setId(testfunctionaldefaults.getId());
        testfunctionaldefaultsId.setTimestampcol(testfunctionaldefaults.getTimestampcol());
        testfunctionaldefaultsId.setTimecol(testfunctionaldefaults.getTimecol());
        testfunctionaldefaultsId.setDatecol(testfunctionaldefaults.getDatecol());
        testfunctionaldefaultsId.setLocaltimecol(testfunctionaldefaults.getLocaltimecol());
        testfunctionaldefaultsId.setLocaltimestampcol(testfunctionaldefaults.getLocaltimestampcol());

        return this.wmGenericDao.findById(testfunctionaldefaultsId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Testfunctionaldefaults delete(TestfunctionaldefaultsId testfunctionaldefaultsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testfunctionaldefaults with id: {}", testfunctionaldefaultsId);
        Testfunctionaldefaults deleted = this.wmGenericDao.findById(testfunctionaldefaultsId);
        if (deleted == null) {
            LOGGER.debug("No Testfunctionaldefaults found with id: {}", testfunctionaldefaultsId);
            throw new EntityNotFoundException(String.valueOf(testfunctionaldefaultsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Testfunctionaldefaults> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Testfunctionaldefaults");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Testfunctionaldefaults> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Testfunctionaldefaults");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Testfunctionaldefaults to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

