/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing9thnov_stage.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing9thnov_stage.viewsdb.Testrelationdifftypes;


/**
 * ServiceImpl object for domain model class Testrelationdifftypes.
 *
 * @see Testrelationdifftypes
 */
@Service("viewsdb.TestrelationdifftypesService")
@Validated
public class TestrelationdifftypesServiceImpl implements TestrelationdifftypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestrelationdifftypesServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.TestrelationdifftypesDao")
    private WMGenericDao<Testrelationdifftypes, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Testrelationdifftypes, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Testrelationdifftypes create(Testrelationdifftypes testrelationdifftypes) {
        LOGGER.debug("Creating a new Testrelationdifftypes with information: {}", testrelationdifftypes);
        Testrelationdifftypes testrelationdifftypesCreated = this.wmGenericDao.create(testrelationdifftypes);
        if(testrelationdifftypesCreated.getTestrelationdifftypesesForSmallintcol() != null) {
            for(Testrelationdifftypes testrelationdifftypesesForSmallintcol : testrelationdifftypesCreated.getTestrelationdifftypesesForSmallintcol()) {
                testrelationdifftypesesForSmallintcol.setTestrelationdifftypesBySmallintcol(testrelationdifftypesCreated);
                LOGGER.debug("Creating a new child Testrelationdifftypes with information: {}", testrelationdifftypesesForSmallintcol);
                create(testrelationdifftypesesForSmallintcol);
            }
        }
        return testrelationdifftypesCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Testrelationdifftypes getById(Short testrelationdifftypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Testrelationdifftypes by id: {}", testrelationdifftypesId);
        Testrelationdifftypes testrelationdifftypes = this.wmGenericDao.findById(testrelationdifftypesId);
        if (testrelationdifftypes == null){
            LOGGER.debug("No Testrelationdifftypes found with id: {}", testrelationdifftypesId);
            throw new EntityNotFoundException(String.valueOf(testrelationdifftypesId));
        }
        return testrelationdifftypes;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Testrelationdifftypes findById(Short testrelationdifftypesId) {
        LOGGER.debug("Finding Testrelationdifftypes by id: {}", testrelationdifftypesId);
        return this.wmGenericDao.findById(testrelationdifftypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Testrelationdifftypes update(Testrelationdifftypes testrelationdifftypes) throws EntityNotFoundException {
        LOGGER.debug("Updating Testrelationdifftypes with information: {}", testrelationdifftypes);
        this.wmGenericDao.update(testrelationdifftypes);

        Short testrelationdifftypesId = testrelationdifftypes.getNumericcol();

        return this.wmGenericDao.findById(testrelationdifftypesId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Testrelationdifftypes delete(Short testrelationdifftypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testrelationdifftypes with id: {}", testrelationdifftypesId);
        Testrelationdifftypes deleted = this.wmGenericDao.findById(testrelationdifftypesId);
        if (deleted == null) {
            LOGGER.debug("No Testrelationdifftypes found with id: {}", testrelationdifftypesId);
            throw new EntityNotFoundException(String.valueOf(testrelationdifftypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Testrelationdifftypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Testrelationdifftypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Testrelationdifftypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Testrelationdifftypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Testrelationdifftypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Testrelationdifftypes> findAssociatedTestrelationdifftypesesForSmallintcol(Short numericcol, Pageable pageable) {
        LOGGER.debug("Fetching all associated testrelationdifftypesesForSmallintcol");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("testrelationdifftypesBySmallintcol.numericcol = '" + numericcol + "'");

        return findAll(queryBuilder.toString(), pageable);
    }


}

